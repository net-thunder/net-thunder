package io.jaspercloud.sdwan;

import cn.hutool.core.util.HexUtil;
import io.jaspercloud.sdwan.tun.IpLayerPacket;
import io.jaspercloud.sdwan.tun.Ipv4Packet;
import io.jaspercloud.sdwan.tun.TcpPacket;
import io.jaspercloud.sdwan.util.ByteBufUtil;
import io.netty.buffer.ByteBuf;

public class TcpTest {

    public static void main(String[] args) throws Exception {
//        {
//            //step1 SYN
//            String hex = "450000347d7940007f06ef27c0de0043c0a80d59"
//                    + "c40779778c71bd01000000008002fd5c5bee0000020405640103030801010402";
//            Ipv4Packet ipv4Packet = Ipv4Packet.decode(Unpooled.wrappedBuffer(ByteBufUtil.toBytes(hex)));
//            TcpPacket tcpPacket = TcpPacket.decode(ipv4Packet.getPayload());
//            ByteBuf encodeTcp = tcpPacket.encode(ipv4Packet, true, true);
//            encodeTcp.markReaderIndex();
//            String tcpHex = HexUtil.encodeHexStr(ByteBufUtil.toBytes(encodeTcp));
//            encodeTcp.resetReaderIndex();
//            ipv4Packet.setPayload(encodeTcp);
//            ByteBuf encodeIp = ipv4Packet.encode(true, true);
//            String ipHex = HexUtil.encodeHexStr(ByteBufUtil.toBytes(encodeIp));
//            Assert.isTrue(ipHex.equals(hex));
//            //IpLayerPacket
//            IpLayerPacket ipLayerPacket = new IpLayerPacket(Unpooled.wrappedBuffer(ByteBufUtil.toBytes(hex)));
//            String rebuild = HexUtil.encodeHexStr(ByteBufUtil.toBytes(ipLayerPacket.rebuild()));
//            Assert.isTrue(rebuild.equals(hex));
//        }
//        {
//            //step2 SYN、ACK
//            String hex = "45000034000040003b06b0a1c0a80d59c0de0043"
//                    + "7977c4078e4e65068c71bd028012a53cc087000002040582010104020103030b";
//            Ipv4Packet ipv4Packet = Ipv4Packet.decode(Unpooled.wrappedBuffer(ByteBufUtil.toBytes(hex)));
//            TcpPacket tcpPacket = TcpPacket.decode(ipv4Packet.getPayload());
//            ByteBuf encodeTcp = tcpPacket.encode(ipv4Packet, true, true);
//            encodeTcp.markReaderIndex();
//            String tcpHex = HexUtil.encodeHexStr(ByteBufUtil.toBytes(encodeTcp));
//            encodeTcp.resetReaderIndex();
//            ipv4Packet.setPayload(encodeTcp);
//            ByteBuf encodeIp = ipv4Packet.encode(true, true);
//            String ipHex = HexUtil.encodeHexStr(ByteBufUtil.toBytes(encodeIp));
//            Assert.isTrue(ipHex.equals(hex));
//            //IpLayerPacket
//            IpLayerPacket ipLayerPacket = new IpLayerPacket(Unpooled.wrappedBuffer(ByteBufUtil.toBytes(hex)));
//            String rebuild = HexUtil.encodeHexStr(ByteBufUtil.toBytes(ipLayerPacket.rebuild()));
//            Assert.isTrue(rebuild.equals(hex));
//        }
//        {
//            //step3 ACK
//            String hex = "450000287d7a40007f06ef32c0de0043c0a80d59"
//                    + "c40779778c71bd028e4e6507501018018e670000";
//            Ipv4Packet ipv4Packet = Ipv4Packet.decode(Unpooled.wrappedBuffer(ByteBufUtil.toBytes(hex)));
//            TcpPacket tcpPacket = TcpPacket.decode(ipv4Packet.getPayload());
//            ByteBuf encodeTcp = tcpPacket.encode(ipv4Packet, true, true);
//            encodeTcp.markReaderIndex();
//            String tcpHex = HexUtil.encodeHexStr(ByteBufUtil.toBytes(encodeTcp));
//            encodeTcp.resetReaderIndex();
//            ipv4Packet.setPayload(encodeTcp);
//            ByteBuf encodeIp = ipv4Packet.encode(true, true);
//            String ipHex = HexUtil.encodeHexStr(ByteBufUtil.toBytes(encodeIp));
//            Assert.isTrue(ipHex.equals(hex));
//            //IpLayerPacket
//            IpLayerPacket ipLayerPacket = new IpLayerPacket(Unpooled.wrappedBuffer(ByteBufUtil.toBytes(hex)));
//            String rebuild = HexUtil.encodeHexStr(ByteBufUtil.toBytes(ipLayerPacket.rebuild()));
//            Assert.isTrue(rebuild.equals(hex));
//        }
//        {
//            //http
//            String hex = "450001557d7b40007f06ee04c0de0043c0a80d59"
//                    + "c40779778c71bd028e4e650750181801ac740000" +
//                    "474554202f696e6465782e61306331383139622e6a7320485454502f312e310d0a557365722d4167656e743a20506f73746d616e52756e74696d652f372e33372e330d0a4163636570743a202a2f2a0d0a43616368652d436f6e74726f6c3a206e6f2d63616368650d0a506f73746d616e2d546f6b656e3a2032623631663662342d623433392d346637632d626366622d6661303465393232326166620d0a486f73743a203139322e3136382e31332e38393a33313039350d0a4163636570742d456e636f64696e673a20677a69702c206465666c6174652c2062720d0a436f6e6e656374696f6e3a206b6565702d616c6976650d0a436f6f6b69653a204a53455353494f4e49443d46333638353443464139334632333243373034463543394143454134354333410d0a0d0a";
//            Ipv4Packet ipv4Packet = Ipv4Packet.decode(Unpooled.wrappedBuffer(ByteBufUtil.toBytes(hex)));
//            TcpPacket tcpPacket = TcpPacket.decode(ipv4Packet.getPayload());
//            ByteBuf encodeTcp = tcpPacket.encode(ipv4Packet, true, true);
//            encodeTcp.markReaderIndex();
//            String tcpHex = HexUtil.encodeHexStr(ByteBufUtil.toBytes(encodeTcp));
//            encodeTcp.resetReaderIndex();
//            ipv4Packet.setPayload(encodeTcp);
//            ByteBuf encodeIp = ipv4Packet.encode(true, true);
//            String ipHex = HexUtil.encodeHexStr(ByteBufUtil.toBytes(encodeIp));
//            Assert.isTrue(ipHex.equals(hex));
//            //IpLayerPacket
//            IpLayerPacket ipLayerPacket = new IpLayerPacket(Unpooled.wrappedBuffer(ByteBufUtil.toBytes(hex)));
//            String rebuild = HexUtil.encodeHexStr(ByteBufUtil.toBytes(ipLayerPacket.rebuild()));
//            Assert.isTrue(rebuild.equals(hex));
//        }
//        {
//            //PSH、ACK
//            String tcp = "7977c4078e4e7ffb8c71be2f5018001608050000"
//                    + "297b666f722876617220743d746869732e747279456e74726965732e6c656e6774682d313b743e3d303b2d2d74297b766172206e3d746869732e747279456e74726965735b745d3b6966286e2e7472794c6f633d3d3d65297b76617220723d6e2e636f6d706c6574696f6e3b696628227468726f77223d3d3d722e74797065297b766172206f3d722e6172673b66286e297d72657475726e206f7d7d7468726f77206e6577204572726f722822696c6c6567616c20636174636820617474656d707422297d2c64656c65676174655969656c643a66756e6374696f6e28652c742c6e297b72657475726e20746869732e64656c65676174653d7b6974657261746f723a642865292c726573756c744e616d653a742c6e6578744c6f633a6e7d2c226e657874223d3d3d746869732e6d6574686f64262628746869732e6172673d766f69642030292c777d7d2c767d66756e6374696f6e206f2865297b72657475726e20612e6170706c7928746869732c617267756d656e7473297d66756e6374696f6e206128297b72657475726e20613d28302c632e64656661756c7429287228292e6d61726b2866756e6374696f6e20652874297b72657475726e207228292e777261702866756e6374696f6e2865297b666f72283b3b2973776974636828652e707265763d652e6e657874297b6361736520303a72657475726e20652e616272757074282272657475726e222c28302c752e64656661756c742928222f6170692f222e636f6e63617428742929293b6361736520313a6361736522656e64223a72657475726e20652e73746f7028297d7d2c65297d29292c612e6170706c7928746869732c617267756d656e7473297d76617220693d6e28226f75434c22293b4f626a6563742e646566696e6550726f706572747928742c225f5f65734d6f64756c65222c7b76616c75653a21307d292c742e71756572793d6f3b76617220633d69286e28226a6c49412229292c753d69286e2822764c67442229297d2c222b316378223a66756e6374696f6e28652c742c6e297b2275736520737472696374223b66756e6374696f6e20722865297b72657475726e20655b695d3d7b7d2c6f2865297d66756e6374696f6e206f2865297b72657475726e20655b695d7d66756e6374696f6e20612865297b64656c65746520655b695d7d76617220693d225f657264223b652e6578706f7274733d7b696e697453746174653a722c67657453746174653a6f2c636c65616e53746174653a617d7d2c222b33775a223a66756e6374696f6e28652c742c6e297b2275736520737472696374223b66756e6374696f6e20722865297b69662841727261792e697341727261792865292972657475726e20657d652e6578706f7274733d727d2c222b345632223a66756e6374696f6e28652c742c6e297b2275736520737472696374223b66756e6374696f6e20722865297b6966282266756e6374696f6e22213d747970656f66205765616b4d61702972657475726e206e756c6c3b76617220743d6e6577205765616b4d61702c6e3d6e6577205765616b4d61703b72657475726e28723d66756e6374696f6e2865297b72657475726e20653f6e3a747d292865297d66756e6374696f6e206f2865297b76617220743d6128293b72657475726e2066756e6374696f6e28297b766172206e2c723d28302c452e64656661756c74292865293b69662874297b766172206f3d28302c452e64656661756c74292874686973292e636f6e7374727563746f723b6e3d5265666c";
//            String hex = "45000534872f40003b062472c0a80d59c0de0043" + tcp;
//            Ipv4Packet ipv4Packet = Ipv4Packet.decode(Unpooled.wrappedBuffer(ByteBufUtil.toBytes(hex)));
//            TcpPacket tcpPacket = TcpPacket.decode(ipv4Packet.getPayload());
//            ByteBuf encodeTcp = tcpPacket.encode(ipv4Packet, true, true);
//            encodeTcp.markReaderIndex();
//            String tcpHex = HexUtil.encodeHexStr(ByteBufUtil.toBytes(encodeTcp));
//            encodeTcp.resetReaderIndex();
//            ipv4Packet.setPayload(encodeTcp);
//            ByteBuf encodeIp = ipv4Packet.encode(true, true);
//            String ipHex = HexUtil.encodeHexStr(ByteBufUtil.toBytes(encodeIp));
//            Assert.isTrue(ipHex.equals(hex));
//            //IpLayerPacket
//            IpLayerPacket ipLayerPacket = new IpLayerPacket(Unpooled.wrappedBuffer(ByteBufUtil.toBytes(hex)));
//            String rebuild = HexUtil.encodeHexStr(ByteBufUtil.toBytes(ipLayerPacket.rebuild()));
//            Assert.isTrue(rebuild.equals(hex));
//        }
//        {
//            // bytes 1380
//            String tcp = "7977c4078e56651f8c71be2f50100016d30e0000"
//                    + "4638786922292c4e3d722878292c6b3d6e28224955424d22292c543d72286b293b742e64656661756c743d7b737472696e673a612e64656661756c742c6d6574686f643a632e64656661756c742c6e756d6265723a6c2e64656661756c742c626f6f6c65616e3a662e64656661756c742c7265676578703a642e64656661756c742c696e74656765723a762e64656661756c742c666c6f61743a6d2e64656661756c742c61727261793a622e64656661756c742c6f626a6563743a4f2e64656661756c742c656e756d3a532e64656661756c742c7061747465726e3a4d2e64656661756c742c646174653a5f2e64656661756c742c75726c3a542e64656661756c742c6865783a542e64656661756c742c656d61696c3a542e64656661756c742c72657175697265643a4e2e64656661756c747d7d2c223765347a223a66756e6374696f6e28652c742c6e297b2275736520737472696374223b66756e6374696f6e207228652c74297b766172206e3d692865292c723d216e2626612865292c733d216e262621722626632865292c703d216e262621722626217326266c2865292c643d6e7c7c727c7c737c7c702c683d643f6f28652e6c656e6774682c537472696e67293a5b5d2c763d682e6c656e6774683b666f7228766172207920696e2065292174262621662e63616c6c28652c79297c7c64262628226c656e677468223d3d797c7c73262628226f6666736574223d3d797c7c22706172656e74223d3d79297c7c7026262822627566666572223d3d797c7c22627974654c656e677468223d3d797c7c22627974654f6666736574223d3d79297c7c7528792c7629297c7c682e707573682879293b72657475726e20687d766172206f3d6e28227569654c22292c613d6e28223159623922292c693d6e28224e47456e22292c633d6e282267674f5422292c753d6e28225a47683922292c6c3d6e28225973564722292c733d4f626a6563742e70726f746f747970652c663d732e6861734f776e50726f70657274793b652e6578706f7274733d727d2c223766427a223a66756e6374696f6e28652c742c6e297b2275736520737472696374223b66756e6374696f6e20722865297b76617220743d5b5d3b72657475726e20612e64656661756c742e4368696c6472656e2e666f724561636828652c66756e6374696f6e2865297b766f69642030213d3d6526266e756c6c213d3d6526262841727261792e697341727261792865293f743d742e636f6e6361742872286529293a28302c692e6973467261676d656e74292865292626652e70726f70733f743d742e636f6e636174287228652e70726f70732e6368696c6472656e29293a742e70757368286529297d292c747d766172206f3d6e28226f75434c22293b4f626a6563742e646566696e6550726f706572747928742c225f5f65734d6f64756c65222c7b76616c75653a21307d292c742e64656661756c743d723b76617220613d6f286e282247694b332229292c693d6e28226e63665722297d2c2237675830223a66756e6374696f6e28652c742c6e297b2275736520737472696374223b76617220723d652e6578706f7274733d7b76657273696f6e3a22322e362e3132227d3b226e756d626572223d3d747970656f66205f5f652626285f5f653d72297d2c2237785764223a66756e6374696f6e28652c742c6e297b2275736520737472696374223b652e6578706f7274733d6e282246386b4122292c652e6578706f7274732e726f7574657252656475783d6e28224d542f4322297d2c2237796c58223a66756e6374696f6e28652c742c6e297b2275736520737472696374223b76617220723d6e28224449565022292c6f3d6e28227477784d22292c613d6e2822514b586d22292c693d6e28226d5a4f";
//            String hex = "4500058c88a640003b0622a3c0a80d59c0de0043" + tcp;
//            Ipv4Packet ipv4Packet = Ipv4Packet.decode(Unpooled.wrappedBuffer(ByteBufUtil.toBytes(hex)));
//            TcpPacket tcpPacket = TcpPacket.decode(ipv4Packet.getPayload());
//            ByteBuf encodeTcp = tcpPacket.encode(ipv4Packet, true, true);
//            encodeTcp.markReaderIndex();
//            String tcpHex = HexUtil.encodeHexStr(ByteBufUtil.toBytes(encodeTcp));
//            encodeTcp.resetReaderIndex();
//            ipv4Packet.setPayload(encodeTcp);
//            ByteBuf encodeIp = ipv4Packet.encode(true, true);
//            String ipHex = HexUtil.encodeHexStr(ByteBufUtil.toBytes(encodeIp));
//            Assert.isTrue(ipHex.equals(hex));
//            //IpLayerPacket
//            IpLayerPacket ipLayerPacket = new IpLayerPacket(Unpooled.wrappedBuffer(ByteBufUtil.toBytes(hex)));
//            String rebuild = HexUtil.encodeHexStr(ByteBufUtil.toBytes(ipLayerPacket.rebuild()));
//            Assert.isTrue(rebuild.equals(hex));
//        }
//        {
//            // bytes 2760
//            String tcp = "7977c4078e566a838c71be2f501000169a050000"
//                    + "4e2229282249455f50524f544f22292c633d66756e6374696f6e28297b7d2c753d66756e6374696f6e28297b76617220652c743d6e28226a68786622292822696672616d6522292c723d612e6c656e6774683b666f7228742e7374796c652e646973706c61793d226e6f6e65222c6e28226430373522292e617070656e644368696c642874292c742e7372633d226a6176617363726970743a222c653d742e636f6e74656e7457696e646f772e646f63756d656e742c652e6f70656e28292c652e777269746528223c7363726970743e646f63756d656e742e463d4f626a6563743c5c2f7363726970743e22292c652e636c6f736528292c753d652e463b722d2d3b2964656c65746520752e70726f746f747970655b615b725d5d3b72657475726e207528297d3b652e6578706f7274733d4f626a6563742e6372656174657c7c66756e6374696f6e28652c74297b766172206e3b72657475726e206e756c6c213d3d653f28632e70726f746f747970653d722865292c6e3d6e657720632c632e70726f746f747970653d6e756c6c2c6e5b695d3d65293a6e3d7528292c766f696420303d3d3d743f6e3a6f286e2c74297d7d2c22382b2b2f223a66756e6374696f6e28652c742c6e297b2275736520737472696374223b66756e6374696f6e20722865297b72657475726e2065213d3d657d652e6578706f7274733d727d2c22382f4552223a66756e6374696f6e28652c742c6e297b2275736520737472696374223b66756e6374696f6e20722865297b6966282266756e6374696f6e22213d747970656f66205765616b4d61702972657475726e206e756c6c3b76617220743d6e6577205765616b4d61702c6e3d6e6577205765616b4d61703b72657475726e28723d66756e6374696f6e2865297b72657475726e20653f6e3a747d292865297d66756e6374696f6e206f28652c74297b69662821742626652626652e5f5f65734d6f64756c652972657475726e20653b6966286e756c6c3d3d3d657c7c226f626a65637422213d747970656f66206526262266756e6374696f6e22213d747970656f6620652972657475726e7b64656661756c743a657d3b766172206e3d722874293b6966286e26266e2e6861732865292972657475726e206e2e6765742865293b766172206f3d7b7d2c613d4f626a6563742e646566696e6550726f706572747926264f626a6563742e6765744f776e50726f706572747944657363726970746f723b666f7228766172206920696e2065296966282264656661756c7422213d3d6926264f626a6563742e70726f746f747970652e6861734f776e50726f70657274792e63616c6c28652c6929297b76617220633d613f4f626a6563742e6765744f776e50726f706572747944657363726970746f7228652c69293a6e756c6c3b63262628632e6765747c7c632e736574293f4f626a6563742e646566696e6550726f7065727479286f2c692c63293a6f5b695d3d655b695d7d72657475726e206f2e64656661756c743d652c6e26266e2e73657428652c6f292c6f7d66756e6374696f6e20612865297b2240626162656c2f68656c70657273202d20747970656f66223b72657475726e28613d2266756e6374696f6e223d3d747970656f662053796d626f6c26262273796d626f6c223d3d747970656f662053796d626f6c2e6974657261746f723f66756e6374696f6e2865297b72657475726e20747970656f6620657d3a66756e6374696f6e2865297b72657475726e206526262266756e6374696f6e223d3d747970656f662053796d626f6c2626652e636f6e7374727563746f723d3d3d53796d626f6c262665213d3d53796d626f6c2e70726f746f747970653f2273796d626f6c223a747970656f6620657d292865297d66756e6374696f6e206928297b72657475726e20693d4f626a6563742e61737369676e7c7c66756e6374696f6e2865297b666f722876617220743d313b743c617267756d656e74732e6c656e6774683b742b2b297b766172206e3d617267756d656e74735b745d3b666f7228766172207220696e206e294f626a6563742e70726f746f747970652e6861734f776e50726f70657274792e63616c6c286e2c7229262628655b725d3d6e5b725d297d72657475726e20657d2c692e6170706c7928746869732c617267756d656e7473297d66756e6374696f6e206328652c742c6e297b72657475726e207420696e20653f4f626a6563742e646566696e6550726f706572747928652c742c7b76616c75653a6e2c656e756d657261626c653a21302c636f6e666967757261626c653a21302c7772697461626c653a21307d293a655b745d3d6e2c657d66756e6374696f6e207528652c74297b69662821286520696e7374616e63656f66207429297468726f77206e657720547970654572726f72282243616e6e6f742063616c6c206120636c61737320617320612066756e6374696f6e22297d66756e6374696f6e206c28652c74297b666f7228766172206e3d303b6e3c742e6c656e6774683b6e2b2b297b76617220723d745b6e5d3b722e656e756d657261626c653d722e656e756d657261626c657c7c21312c722e636f6e666967757261626c653d21302c2276616c756522696e2072262628722e7772697461626c653d2130292c4f626a6563742e646566696e6550726f706572747928652c722e6b65792c72297d7d66756e6374696f6e207328652c742c6e297b72657475726e207426266c28652e70726f746f747970652c74292c6e26266c28652c6e292c657d66756e6374696f6e206628652c74297b6966282266756e6374696f6e22213d747970656f66207426266e756c6c213d3d74297468726f77206e657720547970654572726f72282253757065722065787072657373696f6e206d75737420656974686572206265206e756c6c206f7220612066756e6374696f6e22293b652e70726f746f747970653d4f626a6563742e63726561746528742626742e70726f746f747970652c7b636f6e7374727563746f723a7b76616c75653a652c7772697461626c653a21302c636f6e666967757261626c653a21307d7d292c7426267028652c74297d66756e6374696f6e207028652c74297b72657475726e28703d4f626a6563742e73657450726f746f747970654f667c7c66756e6374696f6e28652c74297b72657475726e20652e5f5f70726f746f5f5f3d742c657d2928652c74297d66756e6374696f6e20642865297b76617220743d7928293b72657475726e2066756e6374696f6e28297b766172206e2c723d6d2865293b69662874297b766172206f3d6d2874686973292e636f6e7374727563746f723b6e3d5265666c6563742e636f6e73747275637428722c617267756d656e74732c6f297d656c7365206e3d722e6170706c7928746869732c617267756d656e7473293b72657475726e206828746869732c6e297d7d66756e6374696f6e206828652c74297b72657475726e21747c7c226f626a65637422213d3d6128742926262266756e6374696f6e22213d747970656f6620743f762865293a747d66756e6374696f6e20762865297b696628766f696420303d3d3d65297468726f77206e6577205265666572656e63654572726f72282274686973206861736e2774206265656e20696e697469616c69736564202d2073757065722829206861736e2774206265656e2063616c6c656422293b72657475726e20657d66756e6374696f6e207928297b69662822756e646566696e6564223d3d747970656f66205265666c6563747c7c215265666c6563742e";
//            String hex = "45000af088a740003b061d3ec0a80d59c0de0043" + tcp;
//            Ipv4Packet ipv4Packet = Ipv4Packet.decode(Unpooled.wrappedBuffer(ByteBufUtil.toBytes(hex)));
//            TcpPacket tcpPacket = TcpPacket.decode(ipv4Packet.getPayload());
//            ByteBuf encodeTcp = tcpPacket.encode(ipv4Packet, true, false);
//            encodeTcp.markReaderIndex();
//            String tcpHex = HexUtil.encodeHexStr(ByteBufUtil.toBytes(encodeTcp));
//            encodeTcp.resetReaderIndex();
//            ipv4Packet.setPayload(encodeTcp);
//            ByteBuf encodeIp = ipv4Packet.encode(true, true);
//            String ipHex = HexUtil.encodeHexStr(ByteBufUtil.toBytes(encodeIp));
//            Assert.isTrue(ipHex.equals(hex));
//            //IpLayerPacket
//            IpLayerPacket ipLayerPacket = new IpLayerPacket(Unpooled.wrappedBuffer(ByteBufUtil.toBytes(hex)));
//            String rebuild = HexUtil.encodeHexStr(ByteBufUtil.toBytes(ipLayerPacket.rebuild()));
//            Assert.isTrue(rebuild.equals(hex));
//        }

        {
            String tcp = "7977c4078e56651f8c71be2f50100016d30e0000" +
                    "4638786922292c4e3d722878292c6b3d6e28224955424d22292c543d72286b293b742e64656661756c743d7b737472696e673a612e64656661756c742c6d6574686f643a632e64656661756c742c6e756d6265723a6c2e64656661756c742c626f6f6c65616e3a662e64656661756c742c7265676578703a642e64656661756c742c696e74656765723a762e64656661756c742c666c6f61743a6d2e64656661756c742c61727261793a622e64656661756c742c6f626a6563743a4f2e64656661756c742c656e756d3a532e64656661756c742c7061747465726e3a4d2e64656661756c742c646174653a5f2e64656661756c742c75726c3a542e64656661756c742c6865783a542e64656661756c742c656d61696c3a542e64656661756c742c72657175697265643a4e2e64656661756c747d7d2c223765347a223a66756e6374696f6e28652c742c6e297b2275736520737472696374223b66756e6374696f6e207228652c74297b766172206e3d692865292c723d216e2626612865292c733d216e262621722626632865292c703d216e262621722626217326266c2865292c643d6e7c7c727c7c737c7c702c683d643f6f28652e6c656e6774682c537472696e67293a5b5d2c763d682e6c656e6774683b666f7228766172207920696e2065292174262621662e63616c6c28652c79297c7c64262628226c656e677468223d3d797c7c73262628226f6666736574223d3d797c7c22706172656e74223d3d79297c7c7026262822627566666572223d3d797c7c22627974654c656e677468223d3d797c7c22627974654f6666736574223d3d79297c7c7528792c7629297c7c682e707573682879293b72657475726e20687d766172206f3d6e28227569654c22292c613d6e28223159623922292c693d6e28224e47456e22292c633d6e282267674f5422292c753d6e28225a47683922292c6c3d6e28225973564722292c733d4f626a6563742e70726f746f747970652c663d732e6861734f776e50726f70657274793b652e6578706f7274733d727d2c223766427a223a66756e6374696f6e28652c742c6e297b2275736520737472696374223b66756e6374696f6e20722865297b76617220743d5b5d3b72657475726e20612e64656661756c742e4368696c6472656e2e666f724561636828652c66756e6374696f6e2865297b766f69642030213d3d6526266e756c6c213d3d6526262841727261792e697341727261792865293f743d742e636f6e6361742872286529293a28302c692e6973467261676d656e74292865292626652e70726f70733f743d742e636f6e636174287228652e70726f70732e6368696c6472656e29293a742e70757368286529297d292c747d766172206f3d6e28226f75434c22293b4f626a6563742e646566696e6550726f706572747928742c225f5f65734d6f64756c65222c7b76616c75653a21307d292c742e64656661756c743d723b76617220613d6f286e282247694b332229292c693d6e28226e63665722297d2c2237675830223a66756e6374696f6e28652c742c6e297b2275736520737472696374223b76617220723d652e6578706f7274733d7b76657273696f6e3a22322e362e3132227d3b226e756d626572223d3d747970656f66205f5f652626285f5f653d72297d2c2237785764223a66756e6374696f6e28652c742c6e297b2275736520737472696374223b652e6578706f7274733d6e282246386b4122292c652e6578706f7274732e726f7574657252656475783d6e28224d542f4322297d2c2237796c58223a66756e6374696f6e28652c742c6e297b2275736520737472696374223b76617220723d6e28224449565022292c6f3d6e28227477784d22292c613d6e2822514b586d22292c693d6e28226d5a4f";
            String ip = "4500058c88a640003b0622a3c0a80d59c0de0043" + tcp;
            {
                Ipv4Packet ipv4Packet = Ipv4Packet.decode(ByteBufUtil.toByteBuf(ByteBufUtil.toBytes(ip)));
                //Header Checksum: 0x22a3 [validation disabled]
                System.out.println(String.format("ip: 0x%x", ipv4Packet.getChecksum()));
                TcpPacket tcpPacket = TcpPacket.decode(ipv4Packet.getPayload());
                //Checksum: 0xd30e [unverified]
                System.out.println(String.format("tcp: 0x%x", tcpPacket.getChecksum()));
            }
            //ipLayerPacket
            IpLayerPacket ipLayerPacket = new IpLayerPacket(ByteBufUtil.toByteBuf(ByteBufUtil.toBytes(ip)));
            ByteBuf rebuild = ipLayerPacket.rebuild();
            {
                Ipv4Packet ipv4Packet = Ipv4Packet.decodeMark(rebuild);
                //Header Checksum: 0x22a3 [validation disabled]
                System.out.println(String.format("ip: 0x%x", ipv4Packet.getChecksum()));
                TcpPacket tcpPacket = TcpPacket.decode(ipv4Packet.getPayload());
                //Checksum: 0xd30e [unverified]
                System.out.println(String.format("tcp: 0x%x", tcpPacket.getChecksum()));
            }
            String hexStr = HexUtil.encodeHexStr(ByteBufUtil.toBytes(rebuild));
            boolean equals = hexStr.equals(ip);
            System.out.println();
        }
        System.out.println();
    }
}
